# line nr: 23
@rule integrate(Power(Optional(Pattern(~b, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~p, Blank())) + Optional(Pattern(~c, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~q, Blank())) + Pattern(~a, Blank()), Pattern(~n, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~m, Blank())), Pattern(~x, Blank(~Symbol))) => if And(FreeQ(List(~a, ~b, ~c, ~d, ~e), ~x), IntegerQ(~m*Power(2, -1)), IntegerQ(~p*Power(2, -1)), IntegerQ(~q*Power(2, -1)), IntegerQ(~n), GtQ(~p, 0), LeQ(~p, ~q))
  Module(List(Set(~f, FreeFactors(cot(~d + ~e*~x), ~x))), -~f*Power(~e, -1)*Subst(integrate(Power(Power(1 + Power(~f, 2)*Power(~x, 2), 1 + ~m*Power(2, -1) + ~n*~q*Power(2, -1)), -1)*Power(ExpandToSum(~c + ~b*Power(1 + Power(~f, 2)*Power(~x, 2), ~q*Power(2, -1) - ~p*Power(2, -1)) + ~a*Power(1 + Power(~f, 2)*Power(~x, 2), ~q*Power(2, -1)), ~x), ~n), ~x), ~x, cot(~d + ~e*~x)*Power(~f, -1)))
end

# line nr: 30
@rule integrate(Power(Optional(Pattern(~c, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~q, Blank())) + Optional(Pattern(~b, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~p, Blank())) + Pattern(~a, Blank()), Pattern(~n, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~m, Blank())), Pattern(~x, Blank(~Symbol))) => if And(FreeQ(List(~a, ~b, ~c, ~d, ~e), ~x), IntegerQ(~m*Power(2, -1)), IntegerQ(~p*Power(2, -1)), IntegerQ(~q*Power(2, -1)), IntegerQ(~n), GtQ(~p, 0), LeQ(~p, ~q))
  Module(List(Set(~f, FreeFactors(tan(~d + ~e*~x), ~x))), ~f*Power(~e, -1)*Subst(integrate(Power(Power(1 + Power(~f, 2)*Power(~x, 2), 1 + ~m*Power(2, -1) + ~n*~q*Power(2, -1)), -1)*Power(ExpandToSum(~c + ~b*Power(1 + Power(~f, 2)*Power(~x, 2), ~q*Power(2, -1) - ~p*Power(2, -1)) + ~a*Power(1 + Power(~f, 2)*Power(~x, 2), ~q*Power(2, -1)), ~x), ~n), ~x), ~x, tan(~d + ~e*~x)*Power(~f, -1)))
end

# line nr: 37
@rule integrate(Power(Optional(Pattern(~b, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~p, Blank())) + Optional(Pattern(~c, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~q, Blank())) + Pattern(~a, Blank()), Pattern(~n, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~m, Blank())), Pattern(~x, Blank(~Symbol))) => if And(FreeQ(List(~a, ~b, ~c, ~d, ~e), ~x), IntegerQ(~m*Power(2, -1)), IntegerQ(~p*Power(2, -1)), IntegerQ(~q*Power(2, -1)), IntegerQ(~n), LtQ(0, ~q, ~p))
  Module(List(Set(~f, FreeFactors(cot(~d + ~e*~x), ~x))), -~f*Power(~e, -1)*Subst(integrate(Power(Power(1 + Power(~f, 2)*Power(~x, 2), 1 + ~m*Power(2, -1) + ~n*~p*Power(2, -1)), -1)*Power(ExpandToSum(~c*Power(1 + Power(~f, 2)*Power(~x, 2), ~p*Power(2, -1) - ~q*Power(2, -1)) + ~a*Power(1 + Power(~f, 2)*Power(~x, 2), ~p*Power(2, -1)) + ~b*Power(~f, ~p)*Power(~x, ~p), ~x), ~n), ~x), ~x, cot(~d + ~e*~x)*Power(~f, -1)))
end

# line nr: 45
@rule integrate(Power(Optional(Pattern(~c, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~q, Blank())) + Optional(Pattern(~b, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~p, Blank())) + Pattern(~a, Blank()), Pattern(~n, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~m, Blank())), Pattern(~x, Blank(~Symbol))) => if And(FreeQ(List(~a, ~b, ~c, ~d, ~e), ~x), IntegerQ(~m*Power(2, -1)), IntegerQ(~p*Power(2, -1)), IntegerQ(~q*Power(2, -1)), IntegerQ(~n), LtQ(0, ~q, ~p))
  Module(List(Set(~f, FreeFactors(tan(~d + ~e*~x), ~x))), ~f*Power(~e, -1)*Subst(integrate(Power(Power(1 + Power(~f, 2)*Power(~x, 2), 1 + ~m*Power(2, -1) + ~n*~p*Power(2, -1)), -1)*Power(ExpandToSum(~c*Power(1 + Power(~f, 2)*Power(~x, 2), ~p*Power(2, -1) - ~q*Power(2, -1)) + ~a*Power(1 + Power(~f, 2)*Power(~x, 2), ~p*Power(2, -1)) + ~b*Power(~f, ~p)*Power(~x, ~p), ~x), ~n), ~x), ~x, tan(~d + ~e*~x)*Power(~f, -1)))
end

# line nr: 53
@rule integrate(Power(Optional(Pattern(~b, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~p, Blank())) + Optional(Pattern(~c, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~q, Blank())) + Pattern(~a, Blank()), Pattern(~n, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~m, Blank())), Pattern(~x, Blank(~Symbol))) => if And(FreeQ(List(~a, ~b, ~c, ~d, ~e), ~x), IntegerQ(~m*Power(2, -1)), IntegerQ(~p*Power(2, -1)), IntegerQ(~q*Power(2, -1)), IntegerQ(~n), GtQ(~p, 0), LeQ(~p, ~q))
  Module(List(Set(~f, FreeFactors(cot(~d + ~e*~x), ~x))), -~f*Power(~e, -1)*Subst(integrate(Power(Power(1 + Power(~f, 2)*Power(~x, 2), 1 + ~m*Power(2, -1) + ~n*~q*Power(2, -1)), -1)*Power(ExpandToSum(~c + ~b*Power(1 + Power(~f, 2)*Power(~x, 2), ~q*Power(2, -1) - ~p*Power(2, -1)) + ~a*Power(1 + Power(~f, 2)*Power(~x, 2), ~q*Power(2, -1)), ~x), ~n), ~x), ~x, cot(~d + ~e*~x)*Power(~f, -1)))
end

# line nr: 60
@rule integrate(Power(Optional(Pattern(~c, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~q, Blank())) + Optional(Pattern(~b, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~p, Blank())) + Pattern(~a, Blank()), Pattern(~n, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~m, Blank())), Pattern(~x, Blank(~Symbol))) => if And(FreeQ(List(~a, ~b, ~c, ~d, ~e), ~x), IntegerQ(~m*Power(2, -1)), IntegerQ(~p*Power(2, -1)), IntegerQ(~q*Power(2, -1)), IntegerQ(~n), GtQ(~p, 0), LeQ(~p, ~q))
  Module(List(Set(~f, FreeFactors(tan(~d + ~e*~x), ~x))), ~f*Power(~e, -1)*Subst(integrate(Power(Power(1 + Power(~f, 2)*Power(~x, 2), 1 + ~m*Power(2, -1) + ~n*~q*Power(2, -1)), -1)*Power(ExpandToSum(~c + ~b*Power(1 + Power(~f, 2)*Power(~x, 2), ~q*Power(2, -1) - ~p*Power(2, -1)) + ~a*Power(1 + Power(~f, 2)*Power(~x, 2), ~q*Power(2, -1)), ~x), ~n), ~x), ~x, tan(~d + ~e*~x)*Power(~f, -1)))
end

# line nr: 67
@rule integrate(Power(Optional(Pattern(~b, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~p, Blank())) + Optional(Pattern(~c, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~q, Blank())) + Pattern(~a, Blank()), Pattern(~n, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~m, Blank())), Pattern(~x, Blank(~Symbol))) => if And(FreeQ(List(~a, ~b, ~c, ~d, ~e), ~x), IntegerQ(~m*Power(2, -1)), IntegerQ(~p*Power(2, -1)), IntegerQ(~q*Power(2, -1)), IntegerQ(~n), LtQ(0, ~q, ~p))
  Module(List(Set(~f, FreeFactors(cot(~d + ~e*~x), ~x))), -~f*Power(~e, -1)*Subst(integrate(Power(Power(1 + Power(~f, 2)*Power(~x, 2), 1 + ~m*Power(2, -1) + ~n*~p*Power(2, -1)), -1)*Power(ExpandToSum(~c*Power(1 + Power(~f, 2)*Power(~x, 2), ~p*Power(2, -1) - ~q*Power(2, -1)) + ~a*Power(1 + Power(~f, 2)*Power(~x, 2), ~p*Power(2, -1)) + ~b*Power(~f, ~p)*Power(~x, ~p), ~x), ~n), ~x), ~x, cot(~d + ~e*~x)*Power(~f, -1)))
end

# line nr: 75
@rule integrate(Power(Optional(Pattern(~c, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~q, Blank())) + Optional(Pattern(~b, Blank()))*Power(sin(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~p, Blank())) + Pattern(~a, Blank()), Pattern(~n, Blank()))*Power(cos(Optional(Pattern(~e, Blank()))*Pattern(~x, Blank()) + Optional(Pattern(~d, Blank()))), Pattern(~m, Blank())), Pattern(~x, Blank(~Symbol))) => if And(FreeQ(List(~a, ~b, ~c, ~d, ~e), ~x), IntegerQ(~m*Power(2, -1)), IntegerQ(~p*Power(2, -1)), IntegerQ(~q*Power(2, -1)), IntegerQ(~n), LtQ(0, ~q, ~p))
  Module(List(Set(~f, FreeFactors(tan(~d + ~e*~x), ~x))), ~f*Power(~e, -1)*Subst(integrate(Power(Power(1 + Power(~f, 2)*Power(~x, 2), 1 + ~m*Power(2, -1) + ~n*~p*Power(2, -1)), -1)*Power(ExpandToSum(~c*Power(1 + Power(~f, 2)*Power(~x, 2), ~p*Power(2, -1) - ~q*Power(2, -1)) + ~a*Power(1 + Power(~f, 2)*Power(~x, 2), ~p*Power(2, -1)) + ~b*Power(~f, ~p)*Power(~x, ~p), ~x), ~n), ~x), ~x, tan(~d + ~e*~x)*Power(~f, -1)))
end

